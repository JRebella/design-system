[{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Welcome to the Norton Design System blog! Keep an eye out here for a deeper look at some of the systems, components, and design decisions that might not make as much sense elsewhere. That's all for now.","keywords":""},{"title":"Components","type":0,"sectionRef":"#","url":"docs/components","content":"Components are the building blocks of the design system. A component describes a common pattern that can be composed together with other components and content to create larger things like pages or applications. In order to facilitate composition, components seek to do one thing well and be as simple as possible while still providing options for customization. Button A button allows the user to perform an action. Checkbox A checkbox allows the user to check or uncheck an option. TK Choice Field A choice field allows the user to choose one or more option from a set of related options. Disclosure A disclosure allows the user to show and hide additional content. TK Dropdown A dropdown allows the user to select an option from a list of options in an expandable overlay. TK Link A link allows the user to navigate to another place. TK Modal A modal presents important information or simple tasks to the user in an overlay. TK Radio Group A radio group allows the user to select one option from a set of related options. TK Switch A switch allows the user to immediately turn an option on or off. TK Text Field A text field allows the user to enter and edit text. TK Tooltip A tooltip displays the name of or description for a related element on demand.","keywords":""},{"title":"Accordion","type":0,"sectionRef":"#","url":"docs/components/accordion","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Accordion","url":"docs/components/accordion#anatomy","content":"An accordion includes two or more vertically stacked disclosures. "},{"title":"Usage","type":1,"pageTitle":"Accordion","url":"docs/components/accordion#usage","content":"Use an accordion to allow users to expand/collapse related sections of content.Down Arrow/Up Arrow moves focus to the next/previous section summaries, respectively.Home and End move focus to the first/last section summaries, respectively. Dos Do use accordions if users only need to see specific section(s) of content on the page.Do ensure that the entire section summary (label and icon) is clickable. Don'ts Don’t display all disclosures within an accordion in an expanded state by default. Caution Use an accordion if users might need to view more than one section at a time.If users are likely to want all sections open most of the time, consider using standard document structure (headings and paragraphs) instead.If users only need to view one section at a time, consider using tabs. "},{"title":"Button","type":0,"sectionRef":"#","url":"docs/components/button","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Button","url":"docs/components/button#anatomy","content":"Text - button text lets the user know what will happen when they click the button. If a button's text is not displayed inside the button, it should be displayed in a related tooltip. Icon (optional) - an icon can be added either before or after a button to emphasize the button text or character. "},{"title":"Usage","type":1,"pageTitle":"Button","url":"docs/components/button#usage","content":"A button is a standalone call-to-action with space or visual emphasis around it.A button has a meaningful label that communicates the action that users can take.Space (keyup) and Enter (keydown) activates the button. Dos Do indicate the most important action on a page or region with a high-emphasis Primary button.Do indicate less important actions with medium-emphasis Secondary buttons or low-emphasis Tertiary buttons. Don'ts Don't wrap text inside a button.Don't use labels that are too long. A button's label should be very concise.Don't choose default button colors that could be confused with disabled buttons.Don't create links that look like buttons. If dictation software users say \"show buttons\", the actions will not be listed. Keyboard users may try to press Space to activate, which will do nothing. "},{"title":"Buttons vs. links","type":1,"pageTitle":"Button","url":"docs/components/button#buttons-vs-links","content":"Links are similar to buttons but the two are not interchangeable. The following should help differentiate when a link may be a better fit for your control. Consider using links if... You are navigating to another place, either on the same page or on a different page.The action will change the URL.It would be useful to \"Copy\", \"Open in a new tab\", or \"Bookmark\" the destination URL.The label is embedded in a sentence, and does not need margins or padding.The label conveys location, not an action (for example: a link that references a resource).Only Enter (keydown) should activate the link. Links always move focus when activated. Use a button if the component is styled like a button. (See Don't create links that look like buttons, above).If a button navigates the user to a new page or section, it might not meet the user's expectations.A button will not record the navigation in the user's browser history, so they will not be able to return to the previous location using their browser's back button.Consider the overall navigation of the site. Links help define the structure, architecture and hierarchy of the site—buttons don't. "},{"title":"React API","type":1,"pageTitle":"Button","url":"docs/components/button#react-api","content":""},{"title":"Button","type":1,"pageTitle":"Button","url":"docs/components/button#button","content":"import { Button } from '@wwnds/react'; Copy Live Editor <Button variant=\"solid\">Solid</Button> <Button variant=\"solid\">Solid</Button> Result Solid Name\tDescription\tType children (required) Button children are required because they are used to provide an accessible label for the button. When rendering with iconOnly, the children will be rendered as an accessible Tooltip that labels the button. ReactNode variant Button variant conveys the button's level of visual emphasis.\t\"solid\" | \"outline\" | \"ghost\" icon An icon to include in the button.\t\"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | \"check\" | \"check-circle\" | ... 31 more ... iconRight Indicates whether the icon should be to the right of the text. By default, the icon is to the left of the text. boolean iconOnly Indicates whether the button's contents should only be the icon. Whentrue, the button's text is still required but will be used as the icon'saria-label. If no icon is specified, this prop has no effect. boolean color The button's color, restricted to design system colors, excluding disabled (prefer the disabled prop). Note that an undefinedcolor will result in the \"primary\" color being used. \"blue\" | \"cyan\" | \"gray\" | \"green\" | \"navy\" | \"purple\" | \"red\" | \"teal\" | \"yellow\" | \"primary\" | \"base\" | \"error\" | \"success\" | \"warning\" buttonRef A reference to the inner <button> element.\t((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null baseName The base class name according to BEM conventions.\tstring iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a <span>\tstring tooltipProps Tooltip props that should be included when the button's children are rendered as a tooltip. Pick<TooltipProps, TooltipPicks> active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"IconButton","type":1,"pageTitle":"Button","url":"docs/components/button#iconbutton","content":"import { IconButton } from '@wwnds/react'; Copy note The IconButton is a simplified way to set an iconOnly button. These two are identical: <Button variant=\"ghost\" iconOnly icon=\"info\">More information</Button> <IconButton icon=\"info\">More information</IconButton> Copy Live Editor <IconButton icon=\"info\">More information</IconButton> <IconButton icon=\"info\">More information</IconButton> Result Name\tDescription\tType children (required) Button children are required because they are used to provide an accessible label for the button. When rendering with iconOnly, the children will be rendered as an accessible Tooltip that labels the button. ReactNode variant Button variant conveys the button's level of visual emphasis.\t\"solid\" | \"outline\" | \"ghost\" icon An icon to include in the button.\t\"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | \"check\" | \"check-circle\" | ... 31 more ... color The button's color, restricted to design system colors, excluding disabled (prefer the disabled prop). Note that an undefinedcolor will result in the \"primary\" color being used. \"blue\" | \"cyan\" | \"gray\" | \"green\" | \"navy\" | \"purple\" | \"red\" | \"teal\" | \"yellow\" | \"primary\" | \"base\" | \"error\" | \"success\" | \"warning\" buttonRef A reference to the inner <button> element.\t((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null baseName The base class name according to BEM conventions.\tstring iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a <span>\tstring tooltipProps Tooltip props that should be included when the button's children are rendered as a tooltip. Pick<TooltipProps, TooltipPicks> active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"docs/components/checkbox","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#anatomy","content":"The anatomy for both the standalone checkbox and a group of related checkboxes are outlined here. "},{"title":"Checkbox","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkbox","content":"Control - the input control that conveys the current state of the checkbox to the user.Label - a short name that lets the user know what the checkbox is checking. Clicking the label should toggle the checkbox.Description (optional) - additional text that can be used to add clarity or context to the checkbox label. Clicking the description should do nothing. "},{"title":"Checkbox Group","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkbox-group","content":"Label - text that conveys how the checkboxes are related and prompts the user to check one or more checkbox.Current selection: a checked checkbox indicates that it will be included when the field is submitted.Choices - the available checkboxes. Clicking a checkbox will check or uncheck it. "},{"title":"Usage","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#usage","content":"A single checkbox has two mutually exclusive states: checked or unchecked.Space toggles the state of the checkbox.Use a group of checkboxes to allow a user to check zero, one or multiple options from a list, and display all available options.Checkboxes may allow users to sub-select options from a nested list (see tri-state checkboxes).Checkboxes work independently of other checkboxes, unless they are controlled by a tri-state checkbox.Avoid setting default options, because pre-checking an option makes it more likely that users will not make a conscious choice and submit an option unintentionally.Consider the most logical order to list options. Options may be listed alphabetically, by popularity, or some other ordered system that should be clear to the user. Dos Do allow users to check an option by clicking the checkbox or its label.Do position the checkbox to the left of its label.Do separate groups of checkboxes with group labels.Do display options in a vertical layout for easier scanning.Do define a label for the checkbox, even if it is not visible (example: when checking a row in a table). Don'ts Don’t use checkboxes if only one item can be checked from a list. Use radio buttons or a dropdown instead.Don’t use a checkbox if an action will take immediate effect when the user checks or unchecks it. Add a Submit button to confirm, or use a toggle instead.Don’t use negative statements for a checkbox, because taking action to check it is confusing and counter-intuitive. (example: “I don’t want to receive email…”) "},{"title":"Tri-state Checkbox","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#tri-state-checkbox","content":"A tri-state checkbox can be used to represent and control the state of a group of other checkboxes. This type of checkbox adds an \"indeterminate\" state that conveys to the user that some—but not all—of the related checkboxes are checked. If all options in the group are checked, the tri-state checkbox displays as checked.If some of the options in the group are checked, the tri-state checkbox displays as indeterminate (partially checked).If none of the options in the group are checked, the tri-state checkbox displays as unchecked.If a user checks a tri-state checkbox, then all the options in the group are checked.If a user unchecks a tri-state checkbox, then all the options in the group are unchecked. "},{"title":"React API","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#react-api","content":"import { Checkbox, CheckboxGroup } from '@wwnds/react'; Copy "},{"title":"Checkbox","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkbox-1","content":"A single checkbox component. Live Editor <Checkbox description=\"Additional information about this checkbox.\" required requiredIndicator > Checkbox </Checkbox> <Checkbox description=\"Additional information about this checkbox.\" required requiredIndicator > Checkbox </Checkbox> Result Checkbox (required) Additional information about this checkbox. Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) indeterminate Mark the checkbox as indeterminate. Has no effect when type=\"radio\". Reference: - DOM - indeterminate- MDN - indeterminate boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean thumbnail The thumbnail element.\tReactNode controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's <input> element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"CheckboxGroup","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkboxgroup","content":"A container for a set of related Checkbox components and its associated prompt (label). Live Editor <CheckboxGroup label=\"Select your favorite fruits.\" name=\"fruit\"> <Checkbox thumbnail=\"🍎\" description=\"A classic choice\">Apple</Checkbox> <Checkbox thumbnail=\"🍌\" description=\"A taste of the tropics\">Banana</Checkbox> <Checkbox thumbnail=\"🥝\" description=\"A bit more exotic\">Kiwi</Checkbox> <Checkbox thumbnail=\"🍊\" description=\"Tangy and juicy\">Orange</Checkbox> </CheckboxGroup> <CheckboxGroup label=\"Select your favorite fruits.\" name=\"fruit\"> <Checkbox thumbnail=\"🍎\" description=\"A classic choice\">Apple</Checkbox> <Checkbox thumbnail=\"🍌\" description=\"A taste of the tropics\">Banana</Checkbox> <Checkbox thumbnail=\"🥝\" description=\"A bit more exotic\">Kiwi</Checkbox> <Checkbox thumbnail=\"🍊\" description=\"Tangy and juicy\">Orange</Checkbox> </CheckboxGroup> Result Select your favorite fruits. 🍎 Apple A classic choice 🍌 Banana A taste of the tropics 🥝 Kiwi A bit more exotic 🍊 Orange Tangy and juicy Name\tDescription\tType baseName string name string label (required) ReactNode description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] required boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring choiceClass string "},{"title":"Disclosure","type":0,"sectionRef":"#","url":"docs/components/disclosure","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#anatomy","content":"Summary button - a control that opens or closes the disclosure and conveys to the user what is contained in the disclosure body.Summary marker - an icon that indicates that the disclosure can be opened or closed. When displayed before the label, the marker should point to the right when closed and down when open.When displayed after the label, the marker should point down when closed and up when open. Body - the disclosed contents, as summarized by the summary button. "},{"title":"Usage","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#usage","content":"Use a disclosure when you want to help the user manage their attention on the page. Disclosures allow the user to skip over secondary content or features by not expanding the disclosure, while still giving them the option to delve deeper should they choose to expand it. The disclosure is named for the principle of progressive disclosure. A disclosure has two states: collapsed and expanded. A disclosure is collapsed by default.A disclosure should include an icon that conveys that it can be activated for more information.A disclosure’s label should clearly and succinctly describe its hidden content, so that the user can choose to expand it.When a disclosure has focus, Enter and Space activate the disclosure and toggle the visibility of content.All focusable elements inside a disclosure are included in the tab order, if the disclosure is expanded. Dos Do use a disclosure to make the page easier to scan, and hide lower-priority information that only some users will need.Do ensure that the entire expandable button (label and icon) is clickable.Do display the expanded content directly after the expandable button. Don'ts Don’t use a disclosure if most or all users need to see the content. When content is hidden, users may ignore that information.Don’t display a disabled disclosure if there is no content to reveal. Instead, do not display the disclosure at all, or include a message explaining why there is no content when the user activates it.Don’t use an icon that has multiple meanings within the same system. Notes If there is only one section of content, then use a disclosure.If there are multiple sections of content, then use an accordion or tabs. "},{"title":"React API","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#react-api","content":"import { Disclosure } from '@wwnds/react'; Copy "},{"title":"Disclosure","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#disclosure","content":"Live Editor <Disclosure panel summary=\"Default disclosure\"> Lorem ipsum dolor sit amet consectetur adipisicing elit. </Disclosure> <Disclosure panel summary=\"Default disclosure\"> Lorem ipsum dolor sit amet consectetur adipisicing elit. </Disclosure> Result Default disclosure Name\tDescription\tType summary (required) The content for the summary element generated by the disclosure component.\tstring marker The marker icon that indicates the disclosure's current state. Similar to theCSS ::marker. The default is caret-right. When panel is true, the default ischevron-down. \"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | \"check\" | \"check-circle\" | ... 33 more ... markerPosition The position of the marker. right when panel={true} and left otherwise.\t\"left\" | \"right\" | ((panel?: boolean) => \"left\" | \"right\" | null) | null | undefined isOpen Used to set the initial open state or fully control it.\tboolean panel Indicates that the disclosure should be in \"panel\" mode, which has a few effects: The default marker will be chevron-downThe default markerPosition will be rightThe disclosure will be given the nds-disclosure--panel modifier class boolean reducedMotion Indicates that animations should be disabled.\tboolean baseName The base className according to BEM conventions.\tstring summaryClass The className that will be applied to the <summary>.\tstring contentsOuterClass The className for the outer contents <div>.\tstring contentsInnerClass The className that will be applied to the inner contents <div>.\tstring markerClass The className that will be applied to the summary's icon indicator, which takes the place of the native summary::marker pseudo element. string onCloseStart Lifecycle method that is triggered when the disclosure begins to close. Returning false will prevent the disclosure from beginning to close. LifecycleCallback onCloseCancel Lifecycle method that is triggered when the user clicks on the disclosure as it's closing. Returning false will cause the disclosure to continue closing. LifecycleCallback onCloseEnd Lifecycle method that is triggered when the disclosure has finished closing.\tLifecycleCallback onOpenStart Lifecycle method that is triggered when the disclosure begins to open. Returning false will prevent the disclosure from beginning to open. LifecycleCallback onOpenCancel Lifecycle method that is triggered when the user clicks on the disclosure as it's opening. Returning false will cause the disclosure to continue opening. LifecycleCallback onOpenEnd Lifecycle method that is triggered when the disclosure has finished opening.\tLifecycleCallback "},{"title":"Choice Field","type":0,"sectionRef":"#","url":"docs/components/choice-field","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#anatomy","content":"Label: text that conveys how the choices are related and prompts the user to choose one or more choice.Current selection: a selected choice indicates that it will be included when the field is submitted.Choices: the available choices. If the Choice Field is single-choice, all choices should be radio buttons.If the Choice Field is multiple-choice, all choices should be checkboxes. Usage In most cases, this component should not be used directly. Rather, you should choose ahead of time whether your field should be single-choice or multi-choice and use the corresponding implementation. For single-choice, use the Radio Group.For multi-choice, use the Checkbox Group. "},{"title":"React API","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#react-api","content":"import { Choice, ChoiceField } from '@wwnds/react'; Copy "},{"title":"ChoiceField","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#choicefield","content":"To switch a ChoiceField between single- and multi-choice, add or remove the multiple prop. Live Editor <ChoiceField label=\"Choose your favorite fruits.\" name=\"fruit\" multiple> <Choice>Apple</Choice> <Choice>Banana</Choice> <Choice>Kiwi</Choice> <Choice>Orange</Choice> </ChoiceField> <ChoiceField label=\"Choose your favorite fruits.\" name=\"fruit\" multiple> <Choice>Apple</Choice> <Choice>Banana</Choice> <Choice>Kiwi</Choice> <Choice>Orange</Choice> </ChoiceField> Result Choose your favorite fruits. Apple Banana Kiwi Orange Name\tDescription\tType label (required) ReactNode multiple boolean name string baseName string choiceClass string required boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"Choice","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#choice","content":"Live Editor <Choice>Apple</Choice> <Choice>Apple</Choice> Result Apple Name\tDescription\tType type \"checkbox\" | \"radio\" indeterminate Mark the checkbox as indeterminate. Has no effect when type=\"radio\". Reference: - DOM - indeterminate- MDN - indeterminate boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean thumbnail The thumbnail element.\tReactNode baseName The base class name according to BEM conventions.\tstring controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's <input> element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) "},{"title":"Layout Grid","type":0,"sectionRef":"#","url":"docs/components/layout-grid","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#anatomy","content":"A Layout Grid includes: ColumnsGuttersMarginsBreakpoint Ranges "},{"title":"Usage","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#usage","content":"Columns set the widths of page regions and align content to consistent guides. All columns are of equal width.Gutters are the spaces between columns that help separate content. All gutters are of equal width.Margins are the spaces between the content and the left/right edges of the screen. Left and right margins should be the same width.Margins can be adjusted to ensure appropriate line length at each breakpoint range. Gutters and margins can be different widths.A Breakpoint Range is a range of screen sizes that have the same layout. At each breakpoint, the layout may adjust to better fit the screen size.The number of columns and the width of the margins and gutters is determined by each breakpoint range. ::: tip Dos Do align major content areas or regions of the page to the layout grid.Do design layouts for the smallest screen sizes first.Do set a maximum width for the layout grid or content areas within the grid, to avoid long line lengths. ::: Don'ts Don’t set margins so large that there isn’t enough room for content.Don’t include fixed-width sidebars in the layout grid.Don’t visually reorder columns independently from their position in the markup. ## Types ### Fluid Grid - By default, use a fluid grid so that content areas flexibly scale to fit any screen width. - Column widths are set as percentages of the overall screen width. - Margins and gutters have a fixed width at each breakpoint range. ### Fixed Grid - Use a fixed grid if it is important for the width of the content area to be static within a breakpoint range. - Gutters and column widths have a fixed width at each breakpoint range, so the content only changes at each breakpoint. - Margins scale fluidly as the overall screen width changes. Copy "},{"title":"Link","type":0,"sectionRef":"#","url":"docs/components/link","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Link","url":"docs/components/link#anatomy","content":"Text - link text should succinctly describe its destination. "},{"title":"Usage","type":1,"pageTitle":"Link","url":"docs/components/link#usage","content":"A link navigates the user to another place on the same page or to a different page.A link helps define the structure, architecture and hierarchy of the site.A link allows the user to return to the previous location by pressing the browser's back button.Activating the link changes the URL.A link's href value must be a valid URL or URL fragment.Enter (keydown) activates the link. Links always move focus when activated. Dos Do use a link when… It would be useful to \"Copy\", \"Open in a new tab\", or \"Bookmark\" the destination URL.The text content is embedded in a sentence, and does not need margins or padding.The text content conveys location, not an action (for example: a link that references a resource).You want to record the navigation in the user's browser history. Do style links so that they are visually different from plain text, and indicate that they can be clicked. Don'ts Don't create links that look like buttons. If dictation software users say \"show buttons\", the actions will not be listed. Keyboard users may try to press Space to activate, which will do nothing.Don’t use an ambiguous label like “click here”. The link’s text content should clearly describe its destination or purpose.Don’t include the full stop if a link is at the end of a sentence or paragraph.Don’t use Javascript to simulate links. Use a valid href instead. Consider using buttons if... The component is styled like a button. (See Don't create links that look like buttons, above).The label communicates an action that the user can take.If the action taken will change or manipulate data on the page. "},{"title":"Dropdown","type":0,"sectionRef":"#","url":"docs/components/dropdown","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#anatomy","content":"Label - a short description or prompt that lets the user know what they will be selecting.Button - a button that opens the dropdown listbox and displays the currently selected option. Default text before selection should be \"Select\".A marker should be displayed to the right of the button's text to convey whether the dropdown listbox is open or closed. Listbox - a container for the list of options that only appears when opened by the dropdown button.Selected option - the currently selected option.Options - the available options. Clicking an unselected option will select that option, deselect the currently selected option, and close the listbox. "},{"title":"Usage","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#usage","content":"Use a dropdown to select one option from a collapsed set of available options.By default, dropdown options are mutually exclusive. The user can only select 1 option.When an option is selected, the dropdown closes and the selected option updates to display that item.On load, the dropdown should display default text of \"Select\". The user should be able to change it back to \"Select\" if they wish.Down Arrow/Up Arrow moves focus to the next/previous options, respectively.Home and End moves focus to the first/last options, respectively. Dos Do keep dropdown options very concise. If long options are unavoidable, then they can truncate when the dropdown is in a closed state, but they should wrap fully in the open state. Do ensure that the clickable area includes the entire selected option area and the icon.Consider the most logical order to list options. Options could be listed alphabetically, chronologically, by popularity, etc. Don'ts Do not start all of the options in a dropdown with the same word or phrase.If there are more than 6 options, consider using a combo box instead.If there are 2 options, consider using radio group or switch instead. If your interface needs to contain many of these selections, use dropdowns over radio buttons. Do not use a dropdown when the user can multi-select options. Use checkboxes instead.If it is not absolutely necessary for a user to choose from a predefined set of options, then consider a text field for users to type their own information. "},{"title":"React API","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#react-api","content":"import { Dropdown, Option } from '@wwnds/react'; Copy "},{"title":"Dropdown","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#dropdown","content":"Live Editor <Dropdown label=\"Choose a sitcom\" sort=\"ascending\"> <Dropdown.Option>The Office</Dropdown.Option> <Dropdown.Option>Community</Dropdown.Option> <Dropdown.Option>Friends</Dropdown.Option> <Dropdown.Option>Parks and Recreation</Dropdown.Option> <Dropdown.Option>How I Met Your Mother</Dropdown.Option> <Dropdown.Option>Modern Family</Dropdown.Option> <Dropdown.Option>The Big Bang Theory</Dropdown.Option> <Dropdown.Option>Arrested Development</Dropdown.Option> </Dropdown> <Dropdown label=\"Choose a sitcom\" sort=\"ascending\"> <Dropdown.Option>The Office</Dropdown.Option> <Dropdown.Option>Community</Dropdown.Option> <Dropdown.Option>Friends</Dropdown.Option> <Dropdown.Option>Parks and Recreation</Dropdown.Option> <Dropdown.Option>How I Met Your Mother</Dropdown.Option> <Dropdown.Option>Modern Family</Dropdown.Option> <Dropdown.Option>The Big Bang Theory</Dropdown.Option> <Dropdown.Option>Arrested Development</Dropdown.Option> </Dropdown> Result Choose a sitcom Select Name\tDescription\tType label (required) The name of the dropdown. Required.\tReactNode children The options for the listbox. Each will be rendered inside a BaseOptioncomponent. When specifying an option as a BaseOptionProps object, the option's value must be the BaseOptionProps['children']. ReactChild[] | (ReactChild[] & string) | (ReactChild[] & number) | (ReactChild[] & false) | (ReactChild[] & true) | (ReactChild[] & ReactElement<...>) | (ReactChild[] & ReactNodeArray) | (ReactChild[] & ReactPortal) sort Sort options by value. undefined will leave the options unsorted.\t\"ascending\" | \"descending\" selected A list of selected options.\tstring | number buttonContents The contents of the button. Default is 'Select' on load and then it will match the contents of the currently selected option if no onChangecallback is provided. ReactNode isOpen Indicates whether the listbox is open.\tboolean closeOnExternalClick Indicates whether clicking outside the listbox should close the listbox.\tboolean closeOnDocumentEscape Indicates whether the dropdown should be closed on Escape.\tboolean matchWidth Indicates that the button and listbox should match widths. * button - the listbox will match the width of the button. * listbox - the button will match the width of the listbox. * undefined - not width matching should be done. \"button\" | \"listbox\" buttonWidth Set the width of the button. Use when matchWidth=\"button\" and the button's width is not set with CSS. string | number name The name attribute for the internal <select>.\tstring baseName The base class name according to BEM conventions. Default is \"dropdown\".\tstring labelClass The class name for the label.\tstring buttonClass The class name for the button.\tstring listboxClass The class name for the listbox.\tstring optionClass The class name for all listbox options.\tstring buttonId An id for the button.\tstring listboxId An id for the listbox.\tstring onRequestClose Callback function that is called when the dropdown attempts to close its listbox. This will occur under the following conditions: * The user clicks outside of the listbox and closeOnExternalClick istrue. * The user presses Escape and closeOnDocumentEscape is true. * The user presses Tab while the listbox is open. (() => void) onRequestOpen Callback function that is called when the dropdown attempts to open its listbox. This will occur under the following conditions: * The user clicks the dropdown button (default: .dropdown__button). * The user presses ArrowUp or ArrowDown while on the dropdown button. (() => void) onChange Callback function that is called when an option is selected. This will occur under the following conditions: * When the user clicks an option. * When the user presses Enter on the currently focused option. * When the user releases the space bar on the currently focused option. (({ value, contents }: OnChangeData) => void) description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring placement The Popper.js placement option.\t\"left\" | \"right\" | \"auto\" | \"auto-start\" | \"auto-end\" | \"top\" | \"bottom\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" modifiers The Popper.js modifiers option.\tPartial<Modifier<any, any>>[] strategy The Popper.js strategy option.\t\"absolute\" | \"fixed\" onFirstUpdate The Popper.js onFirstUpdate option.\t((arg0: Partial<State>) => void) "},{"title":"Option","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#option","content":"Note that the Dropdown also exposes the Option as a static member (Dropdown.Option) for your convenience. Live Editor <Option>Community</Option> <Option>Community</Option> Result Community Name\tDescription\tType value The option's value. If not provided, consumer components are encouraged to treat children.toString() as the value. string | number isSelected Indicates whether the option is currently selected.\tboolean markerClass The class name for the selection marker.\tstring contentsClass The class name for the contents of the option.\tstring "},{"title":"Modal","type":0,"sectionRef":"#","url":"docs/components/modal","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Modal","url":"docs/components/modal#anatomy","content":"Modal container - the modal container provides a boundary for the contents of the modal.Backdrop overlay - an overlay that prevents the user from interacting with the page's main content.Title (recommended) - the name of the modal lets the user know what to expect from it and functions as a header for the body of the modal.Body - the main content of the modal presents important information to the user or asks them to perform simple tasks before exiting the modal.Close button (optional) - a button that will always close the modal. This should always be included when no other controls exist inside the modal. Action buttons (optional) - one or more actions that will result in the dismissal of the modal. "},{"title":"Usage","type":1,"pageTitle":"Modal","url":"docs/components/modal#usage","content":"Use modals to present important information or simple tasks to the user, disabling all access to the main content while the modal is active. Modals are sometimes called \"modal dialogs\" because they create a dialog between the application and the user in a different modality from the main content. Dos Do use a modal to confirm irreversible actions, such as deleting content.Do use a modal to interrupt the user when it will help them accomplish their tasks.Do be careful about ambiguous action buttons, such as \"Yes\" or \"No\". Don'ts Don't overuse modals. They should be used sparingly and thoughtfully.Don't write long titles for modals. They should be clear and concise. "},{"title":"React API","type":1,"pageTitle":"Modal","url":"docs/components/modal#react-api","content":"import { Modal } from '@wwnds/react'; Copy "},{"title":"Modal","type":1,"pageTitle":"Modal","url":"docs/components/modal#modal","content":"Live Editor function ModalWithButton() { const [isOpen, setIsOpen] = React.useState(false); const open = () => setIsOpen(true); const close = () => setIsOpen(false); return ( <> <Button variant=\"solid\" onClick={open}>Open the modal</Button> <Modal title=\"Confirm the prompt\" isOpen={isOpen} onRequestClose={close} actions={[ <Button variant=\"outline\" color=\"base\" onClick={close}> Also confirm </Button>, <Button variant=\"solid\" onClick={close}> Confirm </Button>, ]} > <p> This is a demo modal. Real modals should have useful information here. </p> </Modal> </> ); } function ModalWithButton() { const [isOpen, setIsOpen] = React.useState(false); const open = () => setIsOpen(true); const close = () => setIsOpen(false); return ( <> <Button variant=\"solid\" onClick={open}>Open the modal</Button> <Modal title=\"Confirm the prompt\" isOpen={isOpen} onRequestClose={close} actions={[ <Button variant=\"outline\" color=\"base\" onClick={close}> Also confirm </Button>, <Button variant=\"solid\" onClick={close}> Confirm </Button>, ]} > <p> This is a demo modal. Real modals should have useful information here. </p> </Modal> </> ); } Result Open the modal Name\tDescription\tType isOpen Indicates whether the Modal dialog is open.\tboolean title (required) The name of the Modal dialog. Required for accessibility but can be visually hidden with the hideTitle prop. string hideTitle Indicates that the title should be visually hidden. It will still be accessible to screen reader users. boolean hideCloseButton Indicates that the built-in close button in the top right should not be rendered. boolean actions A list of actions or React Fragment that will be set inside an action bar at the bottom of the Modal dialog. {} | ReactNodeArray | ReactElement<ButtonProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[] stickyHeader Indicates whether the header should stick to the top of the screen. Only has an effect when the modal's content is longer than the window height and the user scrolls enough to move the header above to top of the screen. boolean stickyActionBar Indicates whether the footer should stick to the bottom of the screen. Only has an effect when the modal's content is longer than the window height and the footer is below the bottom of the screen. boolean focusOnOpen An element that should be focused on open. If none is specified, the first focusable element in the Modal will be focused. If none can be found, the header or content will be focused. HTMLElement closeOnBackdropClick Indicates whether clicking the backdrop should close the Modal dialog.\tboolean closeOnEscape Indicates whether Escape should close the Modal dialog.\tboolean mountPoint A function that returns an element where the Modal dialog should be attached to the DOM. Default is the body. (() => HTMLElement) baseName string backdropClass string headerClass string titleClass string closeButtonClass string contentClass string actionBarClass string portalClass string onRequestClose Callback function that is called when the Modal would like to close. This will happen under the following conditions: * if closeOnBackdropClick is true and the user clicks the backdrop. * if closeOnEscape is true and the user presses Escape. * if hideCloseButton is not true and the user clicks the close button. To close the Modal when onRequestClose triggers, simply update theisOpen prop to false. (() => void) onOpen (() => void) headerRef ((instance: HTMLElement | null) => void) | RefObject<HTMLElement> | null contentRef ((instance: HTMLElement | null) => void) | RefObject<HTMLElement> | null actionBarRef ((instance: HTMLElement | null) => void) | RefObject<HTMLElement> | null modal boolean "},{"title":"Switch","type":0,"sectionRef":"#","url":"docs/components/switch","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Switch","url":"docs/components/switch#anatomy","content":" Label - a short name that lets the user know what the switch will turn on or off.Description (optional) - a description that can be used to add clarity to the role of the switch.Control - an indicator that lets the user know the current state of the switch. "},{"title":"Usage","type":1,"pageTitle":"Switch","url":"docs/components/switch#usage","content":"When a user toggles a switch, its corresponding action takes effect right away.A switch has two mutually exclusive states—on and off. Dos Do use a switch to mimic a physical on/off switch in the interface.Do allow users to select the switch by clicking the control or its text label. Don'ts Don’t use the words \"on/off\" in the switch’s text label. The option that the switch controls should be clear from its label. A tooltip/title attribute may be added to convey the on/off state.Don’t use a switch if the option is part of a larger flow, with a final confirmation step or Submit button. Use a checkbox instead.Don’t use a switch if users can select multiple options from a list. Use checkboxes instead. "},{"title":"React API","type":1,"pageTitle":"Switch","url":"docs/components/switch#react-api","content":"import { Switch } from '@wwnds/react'; Copy "},{"title":"Switch","type":1,"pageTitle":"Switch","url":"docs/components/switch#switch","content":"Live Editor <Switch label=\"Switch\" /> <Switch label=\"Switch\" /> Result Switch OFF Name\tDescription\tType label (required) The name of the Switch. Required.\tReactNode children Children are set inside the Switch control. Default is 'ON' when checkedand OFF when unchecked. Disable default with displayDefault={false}. ReactNode tipped Indicates that the label should be rendered as a tooltip.\tboolean checked The switch's initial \"on\" state.\tboolean onToggle A function to call when the switch is toggled.\t((checked: boolean) => void) displayDefault Indicates whether the default control text should be used when no children are provided. \"ON\" when checked=true and \"OFF\" when checked=false. boolean baseName The base class name according to BEM conventions.\tstring tooltipProps Tooltip props that should be included when the switch's label is rendered as a tooltip. Pick<TooltipProps, TooltipPicks> description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring variant Button variant conveys the button's level of visual emphasis.\t\"solid\" | \"outline\" | \"ghost\" icon An icon to include in the button.\t\"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | \"check\" | \"check-circle\" | ... 31 more ... iconRight Indicates whether the icon should be to the right of the text. By default, the icon is to the left of the text. boolean iconOnly Indicates whether the button's contents should only be the icon. Whentrue, the button's text is still required but will be used as the icon'saria-label. If no icon is specified, this prop has no effect. boolean color The button's color, restricted to design system colors, excluding disabled (prefer the disabled prop). Note that an undefinedcolor will result in the \"primary\" color being used. \"blue\" | \"cyan\" | \"gray\" | \"green\" | \"navy\" | \"purple\" | \"red\" | \"teal\" | \"yellow\" | \"primary\" | \"base\" | \"error\" | \"success\" | \"warning\" buttonRef A reference to the inner <button> element.\t((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a <span>\tstring active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"Radio Group","type":0,"sectionRef":"#","url":"docs/components/radio-group","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#anatomy","content":"The anatomy for both a group of related radio buttons and a single radio button are outlined here. "},{"title":"Radio Group","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radio-group","content":"Label - text that conveys how the radio buttons are related and prompts the user to select a single radio button.Current selection: a selected radio button indicates that it will be the option that is submitted.Choices - the available radio buttons. Clicking or arrowing to an unselected radio button will deselect the currently selected radio button. "},{"title":"Radio Button","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radio-button","content":"Control - the input control that conveys the current state of the radio button to the user.Label - a short name that lets the user know what the radio button is selecting. Clicking the label should select the radio button.Description (optional) - additional text that can be used to add clarity or context to the radio button label. Clicking the description should do nothing. Single radio button usage Radio buttons must always be part of a radio group. Using a single radio button by itself would allow the user to check the option but not uncheck it. If that is desired, use a checkbox instead to ensure that the user can uncheck it. "},{"title":"Usage","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#usage","content":"Use radio buttons to allow a user to select exactly one item from a set of options, and display all available options.Radio buttons should have between 2-5 options. If you have more than 5 options, use a dropdown or combo box. The options in a group of radio buttons must be mutually exclusive. The user can only select 1 Radio.Only use radio buttons when the field is required. If all radio buttons are in an unselected state on load, a user must select one of the radio buttons before proceeding.Arrow keys move focus within the group, uncheck the previously focused button, and check the newly focused button.Space selects the focused radio button if it is not already selected. Dos Do allow users to select a Radio by clicking the radio button or its text label.Do position the radio button to the left of its label.Do display options in a vertical layout, by default, for easier scanning.Consider the most logical order to display options, such as alphabetical, chronological or by popularity. Don'ts Don’t use radio buttons if a user could select multiple options. Use checkboxes instead.Don't use radio buttons if a user could select NO Radio. Use checkboxes instead.Don’t use radio buttons if an action will take immediate effect when the user selects or deselects it. Use a switch if there are two opposite options (example: YES/NO, ON/OFF).Otherwise, use a group of regular buttons. "},{"title":"React API","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#react-api","content":"import { Radio, RadioGroup } from '@wwnds/react'; Copy "},{"title":"RadioGroup","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radiogroup","content":"Live Editor <RadioGroup label=\"Select your favorite fruit.\" name=\"fruit\"> <Radio thumbnail=\"🍎\" description=\"A classic choice\">Apple</Radio> <Radio thumbnail=\"🍌\" description=\"A taste of the tropics\">Banana</Radio> <Radio thumbnail=\"🥝\" description=\"A bit more exotic\">Kiwi</Radio> <Radio thumbnail=\"🍊\" description=\"Tangy and juicy\">Orange</Radio> </RadioGroup> <RadioGroup label=\"Select your favorite fruit.\" name=\"fruit\"> <Radio thumbnail=\"🍎\" description=\"A classic choice\">Apple</Radio> <Radio thumbnail=\"🍌\" description=\"A taste of the tropics\">Banana</Radio> <Radio thumbnail=\"🥝\" description=\"A bit more exotic\">Kiwi</Radio> <Radio thumbnail=\"🍊\" description=\"Tangy and juicy\">Orange</Radio> </RadioGroup> Result Select your favorite fruit. 🍎 Apple A classic choice 🍌 Banana A taste of the tropics 🥝 Kiwi A bit more exotic 🍊 Orange Tangy and juicy Name\tDescription\tType baseName string name string label (required) ReactNode description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] required boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring choiceClass string "},{"title":"Radio","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radio","content":"Note: there is no scenario where you would use a single Radio alone. Live Editor <Radio>Apple</Radio> <Radio>Apple</Radio> Result Apple Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) indeterminate Mark the checkbox as indeterminate. Has no effect when type=\"radio\". Reference: - DOM - indeterminate- MDN - indeterminate boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean thumbnail The thumbnail element.\tReactNode controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's <input> element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"Tooltip","type":0,"sectionRef":"#","url":"docs/components/tooltip","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#anatomy","content":"Text - tooltip text names or describes a related element. If the related element does not have a name, the tooltip text is used to name it.If the related element already has a name, the tooltip text is used to add description to the related element. Arrow - a visual indicator that points to the related element. "},{"title":"Usage","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#usage","content":"Use tooltips when there is not enough physical space to display the name or description of an interactive element. Tooltips provide a mechanism for a simplifying the visual design of an interface. But in exchange, users will have a harder time understanding and discovering the role of the tooltipped element, so use them sparingly and thoughtfully. Dos Do use a tooltip to label an interactive element with no visible text such as a button with no text.Do use a tooltip to provide add additional descriptive information to a named element. Don'ts Don't use a tooltip if the contents of the tooltip contain any meaningful markup such as italics, headings, or lists.Don't use a tooltip if the contents of the tooltip contain interactive elements, such as links, buttons, or form controls. Use a tooltip... to name a control when there isn't enough space to display the label inline.to display an additional description about a control or element that already has an accessible name. "},{"title":"Naming and describing","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#naming-and-describing","content":"In the Norton design system, a tooltip can only be used to nameor describe its related element. This restriction ensures that the user experience of the tooltip is consistent for everyone. "},{"title":"Naming","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#naming","content":"A tooltip is said to be naming its related element when it is acting as a label for that element. For instance, an icon button's call to action could be captured as a tooltip to ensure that the purpose of the icon button is clear to everyone. If the element contains textual content and you also want to use a tooltip to add additional context, the tooltip should be a describing tooltip. Naming tooltips & screen reader experience When a tooltip names its related element, screen readers will read the value of the tooltip when they encounter the related element, entirely ignoring any textual content inside the element. For this reason, naming tooltips should only be used for elements that do not already contain textual content. "},{"title":"Describing","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#describing","content":"A tooltip is said to be describing its related element when it is acting as additional or supplemental information about an element that already has a name. For instance, an <input> that already has an associated <label> could use a tooltip to display help text about the expected input format. Describing tooltips & screen reader experience When a tooltip describes its related element, many screen readers will read the name of the related element, pause briefly, and then read the description contained in the tooltip. "},{"title":"React API","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#react-api","content":"import { Tooltip } from '@wwnds/react'; Copy "},{"title":"Tooltip","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#tooltip","content":"Live Editor function ButtonWithTooltip() { const [button, setButton] = React.useState(null); return ( <div style={{ margin: '2rem 0' }}> <Button variant=\"solid\" ref={setButton}>I'm a reference element</Button> <Tooltip isOpen placement=\"top\" reference={button} > I'm a tooltip! </Tooltip> </div> ); } function ButtonWithTooltip() { const [button, setButton] = React.useState(null); return ( <div style={{ margin: '2rem 0' }}> <Button variant=\"solid\" ref={setButton}>I'm a reference element</Button> <Tooltip isOpen placement=\"top\" reference={button} > I'm a tooltip! </Tooltip> </div> ); } Result I'm a reference element I'm a tooltip! Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring contentClass A className to apply to the content. Default will be ${baseName}__content.\tstring arrowClass A className to apply to the arrow. Default will be ${baseName}__arrow.\tstring asLabel Indicates that the tooltip is labelling the reference. If false, the tooltip will be used as description. Reference: - ARIA Practices - Providing Accessible Names and Descriptions boolean trigger A string of space-separated triggers. Options include click, focus,focusin, mouseenter, pointerenter, and manual. When manual is included anywhere in the string, the tooltip's visibility must be controlled via isOpen. Default is \"focus pointerenter\". string hideDelay The time in milliseconds before the tooltip should disappear. Use this to ensure that users can move their cursor from the reference to the tooltip without it disappearing. number isOpen Indicates whether the popper is rendered or not.\tboolean tagName The outer HTML element name. Default is div.\t\"div\" | \"section\" | \"ul\" | \"ol\" | \"dl\" reference The reference element that the popper will be attached to. Reference: - Popper - createPopper Element | VirtualElement | null placement The Popper.js placement option.\t\"left\" | \"right\" | \"auto\" | \"auto-start\" | \"auto-end\" | \"top\" | \"bottom\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" modifiers The Popper.js modifiers option.\tPartial<Modifier<any, any>>[] strategy The Popper.js strategy option.\t\"absolute\" | \"fixed\" onFirstUpdate The Popper.js onFirstUpdate option.\t((arg0: Partial<State>) => void) "},{"title":"Foundations","type":0,"sectionRef":"#","url":"docs/foundations","content":"Foundations are guidelines for using elements of visual design and interaction. Our foundations provide guidance on using visual elements like color and typography, as well as framing for broad design concepts such as design tokens and accessibility. Accessibility Designing for accessibility ensures that interfaces and content are meaningful and effective for everyone. Design Tokens Reusable elements of design are captured as design tokens to ensure consistency without sacrificing flexibility. Color A color system defines visual hierarchy and identity through a consistent experience of color. Typography Effective typography adds clarity and purpose to the flow of your content. Spacing Consistent spacing within and between visual elements balances a design and makes it easier to scan. Motion Careful use of motion can highlight important information and relationships in an expressive way.","keywords":""},{"title":"Text Field","type":0,"sectionRef":"#","url":"docs/components/text-field","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#anatomy","content":"Label - a short name that lets the user know what to type in the field.Field indicator (optional) - a parenthetical that lets the user know whether the field is required or optional. Use this to bring attention to a field that is the \"odd one out.\" For instance, if there are five fields in a form and only one is optional, the field indicator should say \"(optional)\" for that one instead of \"(required)\" for the other four. Description (optional) - additional text that can be used to add clarity to the role of the text field or help the user understand the expected input format.Input container - a container that outlines the boundary of text field's input area and addons.Input area - where the user enters text.Addon(s) (optional) - field addons help the user control the state of the text field. Addons can be included before or after the input area. Error feedback (optional) - feedback that lets the user know that their current input is invalid and why.Character count feedback (optional) - an indicator that lets the user know how many characters they have remaining. "},{"title":"Usage","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#usage","content":"A text field allows a user to freeform type or paste their own response to a prompt.A text field has a label that describes what the user should type.A text field’s label must be visible at all times.A text field’s label must be associated with its input. To associate a label with an input, either use the for attribute or wrap the input in the label element. Dos Do let the size of the input area indicate the amount of content you expect the user to enter. By default, the text field should be full width, defined by the size of its container.Only use a fixed-width input area if the text entry has a specific, known length. The width should remain fixed unless it is wider than its container—then shrink width to fit. Don'ts Don’t use labels that are too long. Labels should be very concise.Don’t include instructions in a label—use help text instead.Don’t disable the user’s ability to select, copy or paste.Don’t require users to write paragraphs of text in a single-line text field. Character Counter A text field may have a character counter, but it is not an intuitive way for users to understand content length.Use a character counter only if it is important for users to know how long their text entry can be, or to clarify if the user surpasses the character limit.By default, a text field does not have a character limit. If necessary, set a limit higher than most users will need.Allow users to enter more than the character limit, and then display an error. This lets a user type or copy and paste their full text entry, then edit it down.The character count should be announced to assistive technology users after they stop typing. Placeholder A text field may have placeholder text to provide hints or examples, but placeholder text should not contain important information.Don’t use placeholder text in place of a label, because it will disappear once the user starts typing in the field.Set an accessible color for placeholder text. Most browsers’ default rendering of placeholder text does not provide a high enough contrast ratio. Required Text Fields By default, a text field should be optional unless there is a significant reason to mark it as required.If using both required and optional text fields in a form, include a clear signifier to differentiate required fields from optional fields. Error Validation By default, display error validation on a text field as soon as the user has moved to the next field.Use caution if displaying error validation before the user has finished entering text.Use caution if displaying error validation on Save or Submit, especially if the text field will not be visible on screen when Save or Submit is activated. "},{"title":"Types","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#types","content":"Text field types are based on the HTML input types that do not require a separate interface for entry, such as a date picker. Where possible, they should be implemented with their corresponding <input> type. "},{"title":"Number","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#number","content":"Allows the user to enter a number, and can display step arrows on focus.Includes built-in validation to reject non-numeric text entry.The default step value is 1, but can be set with more or less granularity, including decimal values.Allow users to use the up and down arrows on their keyboard to adjust the value typed into the field. "},{"title":"Email","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#email","content":"Allows the user to enter an email address or list of email addresses.Includes built-in validation to ensure text entry is a properly formatted email address.Some devices may display an email-specific keyboard for easier entry.Can allow the user's browser to automatically fill out the field, if enabled. "},{"title":"Password","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#password","content":"Allows the user to securely enter a password by obscuring the text entry.Can allow the user’s browser or password manager to automatically fill out the field. "},{"title":"URL","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#url","content":"Allows the user to enter a URL.Includes built-in validation to ensure text entry is a properly formatted URL.Some devices may display a URL keyboard for easier entry. "},{"title":"Tel","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#tel","content":"Allows the user to enter a telephone number.The text entry is not automatically validated, because telephone numbers vary around the world.Some devices may display a telephone keyboard for easier entry. "},{"title":"Text Wrapping Variants","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#text-wrapping-variants","content":"If the user inputs text that cannot fit inside the visible text field container, the text must either wrap or the container must scroll with the text. Three options are provided to address this need. "},{"title":"Single line text field","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#single-line-text-field","content":"A single-line text field displays only one line of text.As the cursor reaches the right edge of the input area, text longer than the input area automatically scrolls left.Use single-line text fields for: Number, Email, Password, and Tel inputs. "},{"title":"Multi-line text field [not yet implemented]","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#multi-line-text-field-not-yet-implemented","content":"A multi-line text field grows to accommodate multiple lines of text and show all text entry at once.Text longer than the input area wraps to a new line. The input area expands vertically and shifts any screen elements below it.Multi-line text fields initially appear as single-line fields, which is useful for compact layouts that need to accommodate large amounts of text.Use multi-line text fields for: free response input and URL. "},{"title":"Text area text field [not yet implemented]","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#text-area-text-field-not-yet-implemented","content":"A text area text field has a fixed height.Text longer than the input area wraps onto a new line, and scrolls vertically when the cursor reaches the bottom of the input area.The large size of the input area indicates that longer responses are possible and encouraged.Use text area text fields for: free response inputs with additional formatting capabilities. "},{"title":"React API","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#react-api","content":"import { TextField } from '@wwnds/react'; Copy "},{"title":"TextField","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#textfield","content":"TextField provides a single interface for a complete <input> field. Internally, it uses the FieldInfo, FieldFeedback, and FieldAddon components. Live Editor <TextField maxLength={30} description=\"Use the description to display hints about entry.\" required requiredIndicator validateOnChange > Default text field </TextField> <TextField maxLength={30} description=\"Use the description to display hints about entry.\" required requiredIndicator validateOnChange > Default text field </TextField> Result Default text field (required) Use the description to display hints about entry. Name\tDescription\tType type Text fields can be a limited subset of <input> types.\t\"number\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\" addonBefore One or more addon that should be included before the <input>.\tReactNode addonAfter One or more addon that should be included after the <input>.\tReactNode feedback Feedback about the user's current input value. By default, this will contain validation errors and the counter, if maxLength is specified. string | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> counterStart When the character counter should begin showing.\tnumber counter A function that takes the remaining number of characters and the maximum number of characters and returns the string or element that will be rendered in the character counter slot. false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) baseName The base class name according to BEM conventions.\tstring inputClass The className for the TextField's <input> element.\tstring addonClass The className for all of the addons (before and after).\tstring groupClass The className for the wrapper that contains the <input> & addons.\tstring feedbackClass The className for the TextField's feedback section, which contains the error text and character count. string counterClass The className for the TextField's character counter element.\tstring invalidClass A className that will be applied to the base element when the <input>is invalid. string inputRef A reference to the internal <input> element.\t((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean onCount Triggered any time the number of characters remaining is updated.\t((remaining?: number) => void) | undefined description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) "},{"title":"FieldInfo","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#fieldinfo","content":"The FieldInfo component is used to information about a related field. It will always contain a label for the field and can contain an optional description. Make sure to include a valid htmlFor prop when used with form controls such as an <input>. Live Editor <FieldInfo description=\"Use the description to display hints about entry.\"> Default text field </FieldInfo> <FieldInfo description=\"Use the description to display hints about entry.\"> Default text field </FieldInfo> Result Use the description to display hints about entry. Default text field Name\tDescription\tType baseName string label (required) The name of the field. Required.\tReactNode indicator An additional label indicator, displayed as a parenthetical inside the label container. For instance, indicator=\"required\" would result in label text content of \"{label} (required)\". string | null indicatorClass A className for the indicator <span>.\tstring labelTag The HTML element name for the label. If htmlFor is included, this will automatically be label. If undefined, this will be div. \"label\" | \"div\" | \"legend\" description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring "},{"title":"FieldFeedback","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#fieldfeedback","content":"A container for field feedback. Use to display content based on field input. Live Editor <FieldFeedback errors={['Something went wrong', 'Another thing isn\\'t right']}> Generic feedback goes here </FieldFeedback> <FieldFeedback errors={['Something went wrong', 'Another thing isn\\'t right']}> Generic feedback goes here </FieldFeedback> Result Something went wrongAnother thing isn't right Generic feedback goes here Name\tDescription\tType liveErrors Indicates whether errors should be a live region. Default is true. Only set to false if you intend to communicate errors to screen reader users through some other mechanism. boolean baseName The base class name according to BEM conventions.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"FieldAddon","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#fieldaddon","content":"The FieldAddon is a simple container for input addons. It is used by the TextField component to render addons before or after the <input>. Live Editor <FieldAddon> <IconButton icon=\"check\">Correct</IconButton> </FieldAddon> <FieldAddon> <IconButton icon=\"check\">Correct</IconButton> </FieldAddon> Result Name\tDescription\tType baseName string "},{"title":"Accessibility","type":0,"sectionRef":"#","url":"docs/foundations/accessibility","content":"","keywords":""},{"title":"Focus","type":1,"pageTitle":"Accessibility","url":"docs/foundations/accessibility#focus","content":"Focus indicates the point of regard for keyboard input. In other words, it gives you a visual clue to where keyboard input will be directed on the page. We provide two focus indicators for you to use: a focus \"halo\" and a focus \"ring,\" both of which are captured as design tokens (focus-halo and focus-ring). Both focus indicators use the box-shadow property rather than the typical outline to ensure that the indicator matches the shape of its element. "},{"title":"Focus Halo","type":1,"pageTitle":"Accessibility","url":"docs/foundations/accessibility#focus-halo","content":"The focus halo is our global focus indicator and should be used in most cases. It contains two rings: a 2px outer ring with a color of focus-halo-outer-colora 1px inner ring with a color of focus-halo-inner-color The resulting effect looks like a halo around the focused element. Example: focus halo To see the focus halo in action, tab to the following button. Focus halo Using the focus halo for most elements ensures a few things that are key to a well-designed focus indicator: Color contrast can always be assured against both the background and the element's background.It is more visually apparent than a normal outline. Focus cannot be visually tracked from point to point like mouse movement can, so it needs to be more visually obvious than most visual elements on a page. It meets WCAG 2.2 Focus Appearance (Enhanced) under most circumstances by including the following: A focus indication area of 2px + a 1px offset.High contrast between the background color and the element's color under nearly every scenario.A high on-focus z-index to ensure that it is never obscured by other content. "},{"title":"Focus ring","type":1,"pageTitle":"Accessibility","url":"docs/foundations/accessibility#focus-ring","content":"The focus ring is more akin to the typical focus outline seen on the web. It contains a 2px ring with a color of focus-color. It is used in situations where some other focus affordance is included. Most notably, this is seen in <input> fields, which provide an additional indication of focus via the insertion caret. Example: focus ring To see the focus ring in action, tab to the following text field. Focus ring "},{"title":"Design Tokens","type":0,"sectionRef":"#","url":"docs/foundations/design-tokens","content":"","keywords":""},{"title":"Types of Design Tokens","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#types-of-design-tokens","content":"The Norton Design System contains three types of design tokens: system, role, and component tokens, which are used in conjunction to capture the entire design of an application. Inheritance The three types of tokens use the following system of inheritance in the Norton Design System. Abstract: component token → role token → system tokenConcrete: button-color → primary-color → teal-60 And in CSS as implemented by @wwnds/core: :root { --nds-teal-60: #1a8082; /* system token */ --nds-primary-color: var(--nds-teal-60); /* role token */ } .my-button { --nds-button-color: var(--nds-primary-color); /* component token */ background-color: var(--nds-button-color); /* token usage */ } Copy "},{"title":"System Tokens","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#system-tokens","content":"A system token is associated with one of our various subsystems, such as the color, motion, spacing, or typography systems. System tokens are immutable—their values cannot be changed—because they are intended to act as a value store rather than part of the theming system.System token names don't give hints as to how they should be used. This is because they are simply property values and could be used in a variety of ways.System tokens should rarely be used directly. "},{"title":"Role Tokens","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#role-tokens","content":"A role token has a semantic purpose in an application's design. Role tokens are customizable and together constitute the primary way to theme a Norton Design System application.Role token names do give hints about how they should be used.Role tokens are the primary interface for theming and should therefore be used directly whenever possible. "},{"title":"Component Tokens","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#component-tokens","content":"A component token is scoped to a specific component. Component tokens are customizable but changing their values may result in inconsistency across components.Component token names generally follow the pattern of {component}-{property}, where component is the name of the component and property captures the CSS property where the token is used. Examples: button-border-width or tooltip-offset-y. Component tokens can and should be used directly when creating custom components based on a Norton Design System component. "},{"title":"Token Conventions","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#token-conventions","content":"In addition to the system of inheritance that our design tokens use, we follow a few key conventions that help you to better understand how to use them in your application. "},{"title":"Base Tokens","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#base-tokens","content":"Base tokens always have the -base suffix, denoting that they are used as the default value for the corresponding property across the application. Customizing these will have the most wide-ranging impact on the design language of your application. Example: custom base border-radius @use '@wwnds/core' as nds with ( $radius-base: var(--nds-radius-lg), ); // buttons, text fields, and other inline components will all have more rounded corners Copy "},{"title":"T-Shirt Sizing","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#t-shirt-sizing","content":"For tokens that fall on a linear scale such as font size, we sometimes use t-shirt sizing suffixes of -xs, -sm, -md, and -lg to capture a normalized subset of values. Customizing these will allow you to change the sense of scale across your application. "},{"title":"Motion","type":0,"sectionRef":"#","url":"docs/foundations/motion","content":"","keywords":""},{"title":"Design Tokens","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#design-tokens","content":"Token\tDefault Value\tUsageduration-scalar1\t1\ta multiplier used for increasing/decreasing all motion speed duration-simple\t100ms\tsimple animations such as selection controls duration-simple-enter\t150ms\tsimple entrances such as fade-ins duration-simple-exit\t75ms\tsimple exits such as fade-outs duration-complex\t200ms\tcomplex animations such as shape changes duration-detailed\t500ms\tdetailed animations such as icon transformations duration-open\t250ms\telements that open from a closed state, such as a sidebar duration-close\t200ms\telements that close from an opened state, such as a sidebar duration-expand\t300ms\tused when an element expands (grows) duration-collapse\t250ms\tused when an element collapses (shrinks) duration-small\tduration-simple\telements with small transition areas, such as icons and selection controls, have short durations duration-medium-expand\tduration-open\texpanding elements with larger transition areas, such as bottom sheets and expanding chips duration-medium-collapse\tduration-close\tcollapsing elements with larger transition areas, such as bottom sheets and expanding chips duration-large-expand\tduration-expand\texpanding elements that traverse a large portion of the screen duration-large-collapse\tduration-collapse\tcollapsing elements that traverse a large portion of the screen easing-standard\tcubic-bezier(0.4, 0, 0.2, 1)\telements that begin and end at rest easing-deceleration\tcubic-bezier(0, 0, 0.2, 1)\tincoming elements that end at rest easing-acceleration\tcubic-bezier(0.4, 0, 1, 1)\telements that begin at rest and exit the screen easing-sharp\tcubic-bezier(0.4, 0, 0.6, 1)\telements that temporarily exit "},{"title":"Duration Scalar","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#duration-scalar","content":"We've introduced the duration-scalar token to help modify transition durations on the fly. It is highly recommend that you use the transition Sass function in @wwnds/coreto set your transitions, as it will automatically multiply your duration by theduration-scalar token. @use '@wwnds/core' as nds; .my-sidebar { /* * Easing is omitted because the transition function uses * var(--nds-easing-standard) by default. */ transition: nds.transition(transform, var(--nds-duration-close)); } .my-sidebar.open { transition: nds.transition(transform, var(--nds-duration-open)); } Copy Alternatively, if you'd like to skip the transition function, you can multiply your durations by the duration-scalar yourself. @use '@wwnds/core' as nds; .my-sidebar { transition: transform calc(var(--nds-duration-scalar) * var(--nds-duration-close)) var(--nds-easing-standard); } .my-sidebar.open { transition: transform calc(var(--nds-duration-scalar) * var(--nds-duration-open)) var(--nds-easing-standard); } Copy "},{"title":"Reduced Motion","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#reduced-motion","content":"To ensure that prefers-reduced-motionis always followed, the duration-scalar value is automatically set to 0 when the user prefers reduced motion. Manually setting a duration that isn't multiplied by the duration-scalar token will result in that duration not being 0 when the user prefers reduced motion. If you'd like to set reduced motion manually, you can also do so with the.nds-reduced-motion utility class or the reduce-motion Sass mixin. @use '@wwnds/core/full' as nds; .no-motion { @include nds.reduce-motion; } Copy "},{"title":"Debugging motion","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#debugging-motion","content":"During development, it can be useful to slow down durations and easings to ensure so that you can see the animations in greater detail. Because the duration-scalar token is set as a CSS custom property, it can be used to increase or decrease all motion speeds across your application. To modify it during development, simply open your dev tools, click on the<html> element, and change the value of the --nds-duration-scalar CSS custom property to any number greater than 1 to slow down and less than 1 to speed up. The duration-scalar token is not part of Material Design's motion system.↩ "},{"title":"Color","type":0,"sectionRef":"#","url":"docs/foundations/color","content":"","keywords":""},{"title":"Design Tokens","type":1,"pageTitle":"Color","url":"docs/foundations/color#design-tokens","content":"The Norton color system uses two types of design tokens for color: System tokens, which have static (unchangeable) values for their grades. These follow a naming pattern of nds-{family}-{grade}, such as nds-cyan-30. Role tokens, which have customizable values for their grades. These follow a naming pattern of nds-{role}-color-{grade}, such as nds-primary-color-60. "},{"title":"System Tokens","type":1,"pageTitle":"Color","url":"docs/foundations/color#system-tokens","content":"The following chart contains all system family colors in the Norton color system. Token names (teal-60), values (#1a8082), and the maximum level of WCAG conformance against black and white are listed on the color swatch. The color system also includes pure white (#fff) and black (#000) and tokens, which are not documented in the family list. View fullscreen red-10 red-20 red-30 red-40 red-50 red-60 red-70 red-80 red-90 red-100 yellow-10 yellow-20 yellow-30 yellow-40 yellow-50 yellow-60 yellow-70 yellow-80 yellow-90 yellow-100 green-10 green-20 green-30 green-40 green-50 green-60 green-70 green-80 green-90 green-100 teal-10 teal-20 teal-30 teal-40 teal-50 teal-60 teal-70 teal-80 teal-90 teal-100 cyan-10 cyan-20 cyan-30 cyan-40 cyan-50 cyan-60 cyan-70 cyan-80 cyan-90 cyan-100 blue-10 blue-20 blue-30 blue-40 blue-50 blue-60 blue-70 blue-80 blue-90 blue-100 purple-10 purple-20 purple-30 purple-40 purple-50 purple-60 purple-70 purple-80 purple-90 purple-100 navy-10 navy-20 navy-30 navy-40 navy-50 navy-60 navy-70 navy-80 navy-90 navy-100 gray-10 gray-20 gray-30 gray-40 gray-50 gray-60 gray-70 gray-80 gray-90 gray-100 "},{"title":"Role Tokens","type":1,"pageTitle":"Color","url":"docs/foundations/color#role-tokens","content":"All color roles reference either a single color or a family of colors. When a role color references an entire family, its grades will map one-to-one. Single-value role tokens# The following role tokens map to a single value. Token\tDefault value\tUsagebackground-color\twhite\tThe main background color text-color\tbase-color-90\tThe main text color text-color-inverse\tbackground-color\tA contrasting text color subdued-color\tbase-color-60\tDe-emphasized, muted, or subdued content selection-background-color\tprimary-color\tThe background color of user-selected text (::selection) selection-text-color\ttext-color-inverse\tThe text color of user-selected text (::selection) focus-color\tblue-50\tThe color used when an element has been focused (:focus) focus-halo-inner-color\tbackground-color\tThe inner color of the focus halo focus-halo-outer-color\tfocus-color\tThe outer color of the focus halo Family role tokens# Role tokens that map to an entire family use two configuration options to determine the mapping: A family that references a color family's name (e.g., \"cyan\"). Configured with the ${role}-family Sass option. An optional grade that defines the midpoint of the shade map. Configured with the ${role}-grade Sass option. Role\tDefault family\tDefault grade\tUsageprimary\t\"teal\"\t60\tThe family used in components that have a default color base\t\"navy\"\tundefined\tBackground, border, or shadow gradients disabled\t\"base\"\t30\tNot currently usable, non-interactive error\t\"red\"\t60\tError, danger, or incorrect success\t\"green\"\t60\tSuccess, passing, or correct warning\t\"yellow\"\t60\tWarning or caution The result will include an entire 10-grade family for the role, plus a shade map if a midpoint grade is defined. For example, setting $primary-family to \"purple\" and $primary-grade to 70 results in the following shade and family map. Shade\tValueprimary-color-lighter\tprimary-color-50 primary-color-light\tprimary-color-60 primary-color\tprimary-color-70 primary-color-dark\tprimary-color-80 primary-color-darker\tprimary-color-90 primary-color-10\tpurple-10 primary-color-20\tpurple-20 primary-color-30\tpurple-30 primary-color-40\tpurple-40 primary-color-50\tpurple-50 primary-color-60\tpurple-60 primary-color-70\tpurple-70 primary-color-80\tpurple-80 primary-color-90\tpurple-90 primary-color-100\tpurple-100 In Sass, these options can be configured globally on use: @use '@wwnds/core' with ( $primary-family: 'purple', $primary-grade: 70, ); Copy Or you can apply them with the provided Sass utilities: @use '@wwnds/core' as nds; .my-purple-element { // .set() applies a list or map of values as CSS custom properties @include nds.set( $nds-primary-color: nds.family(\"primary-color\", \"purple\", 70) ); } Copy Shade maps# When mapping color families to other color families, you can choose to include a midpoint grade, resulting in a 5-grade shade map. Shade\tDescription\tExample{role}-lighter\ttwo grades lighter (-20)\tprimary-color-lighter {role}-light\tone grade lighter (-10)\tprimary-color-light {role}\tthe midpoint shade\tprimary-color {role}-dark\tone grade darker (+10)\tprimary-color-dark {role}-darker\ttwo grades darker (+20)\tprimary-color-darker "},{"title":"Color Schemes","type":1,"pageTitle":"Color","url":"docs/foundations/color#color-schemes","content":"Customizing the color system's role tokens is one of the easiest ways to begin theming an application. We ship default light and dark and color schemes, but you are encouraged to create your own scheme(s) to suit your needs. By default, the dark color scheme uses the same color families as the light scheme but simply inverts the grade scale. See the $light-scheme and $dark-scheme maps in thecolor tokens stylesheetfor a closer look at how this is accomplished. Work in progress The dark color scheme is still being tested and must be turned on with the $enable-dark-scheme flag at this time. @use '@wwnds/core' as nds with ( $enable-dark-scheme: true, ); Copy "},{"title":"Accessibility","type":1,"pageTitle":"Color","url":"docs/foundations/color#accessibility","content":"The Norton color system is built to ensure consistent color contrast across all color families. To accomplish this, grades are normalized across color families to have a similar level of color contrast against black or white. Grades of 60 and higher will always meet the minimum color contrast ratio for WCAG AA when used with pure white (#fff). Conversely, grades of 50 and lower will always meet WCAG AA requirements against pure black (#000). "},{"title":"Spacing","type":0,"sectionRef":"#","url":"docs/foundations/spacing","content":"Work in progress This page still being written. Please submit feedback on GitHub if you would like to contribute.","keywords":""},{"title":"Guides","type":0,"sectionRef":"#","url":"docs/guides","content":"Guides provide a more narrative approach to using the Norton Design System and are targeted to the needs of specific audiences. Work in progress Only the developer guide is complete at this time. Please open an issue on GitHub if you would like to contribute. Developer How to write code with the Norton Design System.","keywords":""},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/guides/dev","content":"","keywords":""},{"title":"Core package","type":1,"pageTitle":"Getting started","url":"docs/guides/dev#core-package","content":"The core package is a Sass implementation of the foundations and styling for all components. It includes the following features: An implementation of the design tokens for all foundational elements (color, typography, etc.) set as CSS custom properties.Modular styling for all components via Sass mixins.A global reset stylesheet, forked from the Bootstrap reboot to use the Norton Design System foundations.A Sass API for theming and customizing every aspect of the library, built on Sass modules. NPMYarn npm install @wwnds/core Copy Links NPM: @wwnds/coreGitHub: packages/core "},{"title":"React package","type":1,"pageTitle":"Getting started","url":"docs/guides/dev#react-package","content":"The React package is a React implementation of the components with no styling applied. It includes the following features: A React Typescript implementation of the Norton Design System components.A rich developer experience powered by the comprehensive typings and descriptions for all top-level components and their props.Useful React hooks to help you build stateless, functional applications. NPMYarn npm install @wwnds/react Copy Links NPM: @wwnds/reactGitHub: packages/react "},{"title":"Independent package usage","type":1,"pageTitle":"Getting started","url":"docs/guides/dev#independent-package-usage","content":"Neither the core package nor the react package depend on one another and can therefore be used fully independently of each other. For instance, you could use @wwnds/core to style a Vue.js application, or you could apply your own styling to @wwnds/react without using anything from @wwnds/core. However, this guide fill focus on combined usage, as the packages work best when used together. "},{"title":"Core API","type":0,"sectionRef":"#","url":"docs/guides/dev/core-api","content":"","keywords":""},{"title":"Theming variables","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#theming-variables","content":"These variables should be configured in a forwarded stylesheet to ensure the most flexibility. Token\tDefault value\tUsage$primary-family\t\"teal\"\tThe family used in components that have a default color $primary-grade\t60\tThe grade that defines the midpoint of the primary color $base-family\t\"navy\"\tBackground, border, or shadow gradients $base-grade\tnull (unset)\tThe grade that defines the midpoint of the base color $disabled-family\t\"base-color\"\tNot currently usable, non-interactive $disabled-grade\t30\tThe grade that defines the midpoint of the disabled color $error-family\t\"red\"\tError, danger, or incorrect $error-grade\t60\tThe grade that defines the midpoint of the error color $success-family\t\"green\"\tSuccess, passing, or correct $success-grade\t60\tThe grade that defines the midpoint of the success color $warning-family\t\"yellow\"\tWarning or caution $warning-grade\t60\tThe grade that defines the midpoint of the warning color $background-color\twhite\tThe main background color $text-color\tbase-color-90\tThe main text color $text-color-inverse\tbackground-color\tA contrasting text color $subdued-color\tbase-color-60\tDe-emphasized, muted, or subdued content $selection-background-color\tprimary-color\tThe background color of user-selected text (::selection) $selection-text-color\ttext-color-inverse\tThe text color of user-selected text (::selection) $focus-color\tblue-50\tThe color used when an element has been focused (:focus) $focus-halo-inner-color\tbackground-color\tThe inner color of the focus halo $focus-halo-outer-color\tfocus-color\tThe outer color of the focus halo $radius-base\tvar(--nds-radius-sm)\tThe main border radius used for component shapes $hd-dpi\t200\tThe minimum dots per inch (dpi) of a high-resolution screen $hd-dppx\t125\tThe minimum dots per pixel unit (dppx) for a high-resolution screen $min-xs\t0\tThe minimum width for an extra small screen: a handset $min-sm\t600px\tThe minimum width for a small screen: a large handset or small tablet $min-md\t960px\tThe minimum width for a medium screen: a large tablet or small laptop $min-lg\t1280px\tThe minimum width for a large screen: a desktop $min-xl\t1920px\tThe minimum width for an extra large screen: a high-definition device $duration-scalar\t1\tA multiplier used for increasing/decreasing all motion speed $font-family-sans\tvar(--nds-font-family-system-sans)\tThe main sans serif font family $font-family-serif\tvar(--nds-font-family-system-serif)\tThe main serif font family $font-family-mono\tvar(--nds-font-family-system-mono)\tThe main monospace font family $font-family-base\tvar(--nds-font-family-sans)\tThe main font family that will be used throughout your application $font-family-headings\tvar(--nds-font-family-base)\tThe font family that will be used for all headings $font-size-root\t1em\tThe font size that is used to define 1rem $font-size-xs\tvar(--nds-font-size-12)\tAn extra small font size $font-size-sm\tvar(--nds-font-size-14)\tA small font size $font-size-md\tvar(--nds-font-size-16)\tA medium font size $font-size-lg\tvar(--nds-font-size-18)\tA large font size $font-size-h1\tvar(--nds-font-size-32)\tThe font size used for the highest heading level $font-size-h2\tvar(--nds-font-size-24)\tThe font size used for second-level headings $font-size-h3\tvar(--nds-font-size-20)\tThe font size used for third-level headings $font-size-h4\tvar(--nds-font-size-18)\tThe font size used for fourth-level headings $font-size-h5\tvar(--nds-font-size-16)\tThe font size used for fifth-level headings $font-size-h6\tvar(--nds-font-size-14)\tThe font size used for sixth-level headings $font-size-base\tvar(--nds-font-size-md)\tThe font size used on the body and to set most text $font-weight-base\tvar(--nds-font-weight-regular)\tThe font weight used for body copy $font-weight-headings\tvar(--nds-font-weight-bold)\tThe font weight used for headings "},{"title":"Tokens","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#tokens","content":"The tokens mixin sets the foundations that contain design tokens as global CSS custom properties on the :root element. You will almost always want to set this as a global stylesheet, as most component styles use the CSS custom properties in their styling. Example: src/styles/tokens.scss @use '@wwnds/core'; @include core.tokens; Copy "},{"title":"Reset","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#reset","content":"The reset mixin is meant to be used to create a global stylesheet that ensures that all HTML elements are rendered consistently across browsers. Example: src/styles/reset.scss @use '@wwnds/core'; @include core.reset; Copy "},{"title":"Components","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#components","content":"The component API provides three levels of usage with different levels of customization to suit your needs. "},{"title":"All components","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#all-components","content":"All component declarations can be set at once in one mixin. Example: src/styles/all-components.scss @use '@wwnds/core'; @include core.components; // resulting CSS will contain declarations for all components Copy "},{"title":"Individual components","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#individual-components","content":"Each individual component exposes a style mixin that is namespaced with the component's name on the top-level API (e.g., button-style). Example: src/styles/my-button.scss @use '@wwnds/core'; @include core.button-style; // resulting CSS will contain only button declarations Copy "},{"title":"Fully modular mixins","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#fully-modular-mixins","content":"Each component composes its styles via mixins. Generally, these are applied to the component's anatomy with BEM selectors but you can use them with your own selectors. Example: src/styles/my-button.scss @use '@wwnds/core'; .custom-button { @include core.button-base; @include core.button-solid; // override or add your own styles // border: 2px solid var(--nds-button-color-80); } .custom-button__icon { @include core.button-icon; } // resulting CSS will contain only the above two declarations Copy "},{"title":"Helpers","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#helpers","content":"Helpers are composed declarations that help with common styling needs that are not connected to any component. Unlike utilities, helpers always set multiple properties per declaration or compose styles together to meet a specific need. Helpers are disabled by default and must be turned on by setting $enable-helpers to true. Example: src/styles/helpers.scss @use '@wwnds/core' with ( $enable-helpers: true, ); @include core.helpers; Copy "},{"title":"Utilities","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#utilities","content":"Utilities are declarations that set a single property and are turned off by default. To enable them, they must be turned on with the $enable-utilities map. Note that the utility API is deliberately minimal and is not suited for production usage. If you would like to use a more utility-focused approach, we like Tailwind CSS. Example: src/styles/utilities.scss @use '@wwnds/core' with ( $enable-utilities: ('color', 'spacing'), ); @include core.utilities; Copy "},{"title":"Complete","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#complete","content":"The complete mixin provides a single way to opt into every declaration. Note that this can also be accessed directly by using @wwnds/core/full. Example: src/styles/norton-design-system.scss @use '@wwnds/core'; @include core.complete; Copy "},{"title":"Typography","type":0,"sectionRef":"#","url":"docs/foundations/typography","content":"","keywords":""},{"title":"Typesets","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#typesets","content":"A typeset is a composed set of typographical styles that are used for specific purposes. We include three categories of typesets to be used with body text, UI text, and headings. All three come in a variety of sizing variants, but you can also define your own typesets as needed. The default typeset, which is used as the default body typeset, utilizes all base tokens. The default typeset @use '@wwnds/core' as nds; .my-selector { @include nds.typeset; } // CSS output // .my-selector { // font-family: var(--nds-font-family-base); // font-size: var(--nds-font-size-base); // line-height: var(--nds-line-height-base); // } Copy "},{"title":"Body Typesets","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#body-typesets","content":"Used for content, the body typesets are typically set at the document body to define the defaults for most content. They always use a font family of font-family-base and a line height of line-height-base. body-xs\tbody-sm\tbody-md\tbody-lg Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Additionally, the body-base typeset uses the base font size token (font-size-base). "},{"title":"UI Typesets","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#ui-typesets","content":"Used for user interface elements where text doesn't typically reflow, the UI typesets have a smaller default line height than body typesets. They always use a font family of font-family-base and a line height of line-height-3. ui-xs\tui-sm\tui-md\tui-lg Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Additionally, the ui-base typeset uses the base font size token (font-size-base). "},{"title":"Heading Typesets","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#heading-typesets","content":"Used to convey hierarchy, the heading typesets create greater vertical separation while still adhering to a consistent vertical rhythm. Heading\tExampleheading-1 Lorem ipsum dolor sit heading-2 Lorem ipsum dolor sit heading-3 Lorem ipsum dolor sit heading-4 Lorem ipsum dolor sit heading-5 Lorem ipsum dolor sit heading-6 Lorem ipsum dolor sit "},{"title":"Font Family","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#font-family","content":"Our font family system provides design tokens for sans serif, serif, and monospace font family types, all defaulting to their respective system stack. System stack defaults help us keep the size of the design system down while ensuring that all devices use a font that looks good on that device. To customize the font family and ensure a more consistent typographic experience for your users, simply override the font family design tokens. Token\tCustomizable\tUsagefont-family-system-sans\tno\ta sans serif system font stack font-family-system-serif\tno\ta serif system font stack font-family-system-mono\tno\ta monospace system font stack font-family-sans\tyes\tthe main sans serif font family font-family-serif\tyes\tthe main serif font family font-family-mono\tyes\tthe main monospace font family font-family-base\tyes\tthe main font family that will be used throughout your application font-family-headings\tyes\tthe font family that will be used for headings "},{"title":"Usage Examples","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#usage-examples","content":"Use a font family token @use '@wwnds/core' as nds; .my-serif-selector { font-family: var(--nds-font-family-serif); } Copy Set custom serif font as base @use '@wwnds/core' with ( $font-family-serif: 'Lora', $font-family-base: var(--nds-font-family-serif), ); // --nds-font-family-base will resolve to \"'Lora', var(--nds-font-family-system-serif)\" Copy "},{"title":"Font Size","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#font-size","content":"The main way to control font sizing in the Norton Design System is with the font size role tokens. These tokens capture the base font size for your content, sizes suitable to convey hierarchy (in other words: headings), and a small subset of t-shirt sizes to help create a consistent sense of scale for typography in your application. Role Token\tDefault value\tPx equivalent1font-size-base\tfont-size-md\t16px font-size-xs\tfont-size-12\t12px font-size-sm\tfont-size-14\t14px font-size-md\tfont-size-16\t16px font-size-lg\tfont-size-18\t18px font-size-h1\tfont-size-32\t32px font-size-h2\tfont-size-24\t24px font-size-h3\tfont-size-20\t20px font-size-h4\tfont-size-18\t18px font-size-h5\tfont-size-16\t16px font-size-h6\tfont-size-14\t14px Font size system tokens form the basis of the font sizing system. Note that these cannot be modified and always use rem units to ensure that the user is in charge of text size. System Token\tValue\tPx equivalent1font-size-10\t0.625rem\t10px font-size-12\t0.75rem\t12px font-size-14\t0.875em\t14px font-size-16\t1rem\t16px font-size-18\t1.125rem\t18px font-size-20\t1.25rem\t20px font-size-24\t1.5rem\t24px font-size-32\t2rem\t32px font-size-40\t2.5rem\t40px font-size-48\t3rem\t48px  "},{"title":"Usage Examples","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#usage-examples-1","content":"Using a font size token @use '@wwnds/core' as nds; .my-large-text { font-size: var(--nds-font-size-lg); } Copy Use larger font sizes across your application @use '@wwnds/core' with ( $font-size-xs: var(--nds-font-size-14), $font-size-sm: var(--nds-font-size-16), $font-size-md: var(--nds-font-size-18), $font-size-lg: var(--nds-font-size-20), ); // --nds-font-size-base is still equal to var(--nds-font-size-md), // making the base font size equivalent to 18px Copy Since all font sizes are set as rem, the computed pixel equivalent assumes a browser font size of 16px.↩ "},{"title":"React API","type":0,"sectionRef":"#","url":"docs/guides/dev/react-api","content":"To come This guide is still being written. Please bear with us while we finalize it and open an issue on GitHub if you would like to contribute.","keywords":""},{"title":"Stylesheet setup","type":0,"sectionRef":"#","url":"docs/guides/dev/stylesheet-setup","content":"","keywords":""},{"title":"Single stylesheet","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#single-stylesheet","content":"The simplest way to use the design system's styling is to use a single global stylesheet. This can be accomplished with either the pre-built CSS or the full Sass entry point. "},{"title":"Pre-built CSS","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#pre-built-css","content":"Two CSS files are included in our release distributions of @wwnds/core. dist/main.css - the complete stylesheet.dist/tokens.css - only the global design tokens (excluding component tokens), set on the :root element. <!-- in a Node.js project --> <link href=\"node_modules/@wwnds/core/dist/main.css\" rel=\"stylesheet\" /> <!-- using unpkg as a CDN (not suitable for production but ideal for prototyping) --> <link href=\"https://unpkg.com/@wwnds/core/dist/main.css\" rel=\"stylesheet\" /> Copy "},{"title":"Custom build","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#custom-build","content":"If you would like to customize something but still use the complete stylesheet, it is recommended that you use the full Sass entry point. For instance, the following will be identical to the dist/main.css file but with the primary color family assigned to yellow (default is teal). @use '@wwnds/core/full' with ( $primary-family: 'yellow', ); Copy Note that a similar approach can be accomplished by using the complete mixin to create your own complete stylesheet. "},{"title":"Modular usage","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#modular-usage","content":"Using the Sass modules directly is ideal for scenarios where a single global stylesheet is not desired, such as in a React environment or when you only want to use part of the design system. "},{"title":"Configuration","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#configuration","content":"The best way to get started with modular stylesheets is to @forward a configured version of the design system for use in your stylesheets. This acts as the main place where Sass variables are configured to meet the needs of your application's look and feel and does not itself contain any declarations. src/styles/_nds.scss // note: name this file whatever makes sense to you @forward '@wwnds/core' with ( $font-family-base: 'My fancy font', $radius-base: var(--nds-radius-xl), $primary-family: 'cyan', ); Copy Customizable variables Any variable in @wwnds/core that contains the !default flag is customizable in this way. These variables are documented in the Sassdoc documentation, as well as the Core API - Theming variables table. Once your configured version of @wwnds/core has been forwarded, it should be @used anywhere you need to use the core mixins or functions. "},{"title":"Setting tokens","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#setting-tokens","content":"At a minimum, you must create and use one global stylesheet to set the design tokens as CSS custom properties. This is because every component, utility, and helper in the design system uses our design tokens. src/styles/globals.scss @use 'nds'; // the configured & forwarded src/styles/_nds.scss @include nds.tokens; // contains `:root` declarations with CSS custom properties // optionally include other globals, such as the HTML reset styles @include nds.reset; Copy "},{"title":"Other approaches","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#other-approaches","content":"Other approaches, such as using the @import syntax or CSS-in-JS may work but aren't well-tested. Use them at your own risk. CSS modules# While not well tested, CSS modules can be composed with core styles in environments that support CSS modules, such as in React. src/components/CustomButton/nds-button.scss @use '../../styles/nds'; // apply the default design system styles for the button component @include nds.button-style; Copy src/components/CustomButton/index.module.scss @use '../../styles/nds'; // the configured & forwarded src/styles/_nds.scss .btn { // override a component token --nds-button-border-radius: var(--nds-radius-pill); // set additional styles with core margin-bottom: nds.spacer(\"1rem\"); } Copy src/components/CustomButton/index.jsx import React from \"react\"; import { Button } from \"@wwnds/react\"; // main design system button styles import \"./nds-button.scss\"; // modular styles import styles from \"./index.module.scss\"; export const CustomButton = ({ children, ...props }) => ( <Button className={styles.btn} {...props}> {children} </Button> ); Copy "},{"title":"Writing CSS","type":0,"sectionRef":"#","url":"docs/guides/dev/writing-css","content":"","keywords":""},{"title":"Theming","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#theming","content":"The Norton Design System's CSS is fully themeable through the use of Sass variables. The variables that capture the foundational style elements constitute the main interface for theming an application. Refer to the variables table to learn more about these customizable variables. "},{"title":"Best practices","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#best-practices","content":"To get the most out of the Norton Design System's CSS, some best practices should be followed for writing your CSS. "},{"title":"Use CSS custom properties, not Sass variables","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#use-css-custom-properties-not-sass-variables","content":"CSS custom properties are live variables that can be modified via JavaScript and will always reference the current value of the token. Sass variables, on the other hand, are hard-coded into the stylesheet when the CSS is compiled and cannot be changed after that point. @use '@wwnds/core'; // 👍 Good: use the CSS custom property .foo { font-family: var(--nds-font-family-serif); } // 👎 Bad: use the Sass variable .foo { font-family: core.$font-family-serif; } Copy Why? CSS custom properties are supported directly in the browser, whereas Sass variables are not. "},{"title":"Use role tokens, not system tokens","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#use-role-tokens-not-system-tokens","content":"Using role tokens will facilitate theming in your application through customization since role tokens can be customized and system tokens cannot. Refer to the design token types inheritance outline for more clarification of this convention. @use '@wwnds/core'; // ✨ Best: modify a known role token at this scope and then use it // (not always possible) .foo { --nds-background-color: var(--nds-base-color-20); background-color: var(--nds-background-color); } // 👍 Good: use the role token .foo { background-color: var(--nds-base-color-20); } // 👎 Bad: use the system token .foo { background-color: var(--nds-navy-20); } Copy Why? System token values are static and cannot be modified, which prevents you from using them to theme your component. "},{"title":"Override token values instead of property values whenever possible","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#override-token-values-instead-of-property-values-whenever-possible","content":"Some tokens, like text-color and background-color are set globally and are designed to use the CSS cascade to style all elements. We encourage you to embrace the cascade—a fundamental feature of CSS—modifying token values at specific scopes to accomplish your goals instead of modifying properties directly. @use '@wwnds/core'; // 👍 Good: override the token value and then use it .foo { --nds-text-color: var(--nds-base-color-10); --nds-background-color: var(--nds-primary-color-80); color: var(--nds-text-color); background-color: var(--nds-background-color); } // Okay: override the property value .foo { color: var(--nds-base-color-10); background-color: var(--nds-primary-color-80); } Copy Why? This will ensure that children of this component that use the role tokens use the locally-scoped values instead of the global ones. For instance, the focus-halo uses --nds-background-color to create the illusion of an offset halo when an element is focused. If your element's background color is hard-coded as --nds-primary-color-80, that focus halo will now have an offset that does not appear to match the background color. It's considered okay to use tokens directly in scenarios where component isolation is favored. "},{"title":"Compose your own CSS custom properties out of existing tokens","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#compose-your-own-css-custom-properties-out-of-existing-tokens","content":"We deliberately provide only a small set of opinionated design tokens but recognize that you may have application-specific styles that would make sense as tokens. @use '@wwnds/core'; // 👍 Good: declare and use your own reusable custom properties out of existing tokens :root { --brand-gradient: linear-gradient( var(--nds-primary-color), var(--nds-primary-color-90), ); } Copy "},{"title":"Use Sass modules","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#use-sass-modules","content":"When using the Sass directly, avoid @import, favoring @forward and @use. // ✨ Best: forward a configured version of the core library @forward '@wwnds/core' with ( // configured Sass variables $radius-base: var(--nds-radius-xl), ); // 👍 Good: use the core library directly @use '@wwnds/core'; // 👎 Bad: use the deprecated import syntax @import '@wwnds/core/full'; Copy Why? The @import at-rule is being deprecated by Sass and won't work sometime in the future. See more about this in the guide on stylesheet configuration. "},{"title":"Principles","type":0,"sectionRef":"#","url":"docs/principles","content":"","keywords":""},{"title":"Accessibility first","type":1,"pageTitle":"Principles","url":"docs/principles#accessibility-first","content":"Accessibility should drive decisions and should never be an afterthought. We believe that focusing on accessibility at the outset improves usability for everyone. Tips This is similar to the principle of mobile-first design, where designing first for the constraints of a smaller screen ensures that users won't lose information when using mobile devices. Define component boundaries based on information architecture and interaction design, not visual design. Everyone should be able to interact with the component and view its content, but not everyone has access to the visuals.Design for keyboard before designing for mouse. Because keyboard flow is linear, designing for it first will force you to think about the linear layout before the non-linear experience of mouse users.Developers: use ARIA sparingly and carefully, but treat ARIA attributes as your source of truth for everyone whenever possible. "},{"title":"Don't overwhelm","type":1,"pageTitle":"Principles","url":"docs/principles#dont-overwhelm","content":"Users should never feel distracted or overwhelmed. This applies to both developers and designers who use the design system as well as customers who use products built with the design system. Tips Favor convention over configurationwhenever possible and sensible defaults when many options are required.Use progressive disclosureto allow for complexity without overwhelming.Avoid extraneous cognitive load—the user should be challenged by challenging content, not a challenging interface.Developers: be wary of abstractions that reduce code readability and maintainability. "},{"title":"Migration","type":0,"sectionRef":"#","url":"docs/migration","content":"","keywords":""},{"title":"v1.0.0-beta.3 → v1.0.0-rc.0","type":1,"pageTitle":"Migration","url":"docs/migration#v100-beta3-→-v100-rc0","content":"The first release candidate contains a couple breaking changes, primarily to design token names. "},{"title":"Core","type":1,"pageTitle":"Migration","url":"docs/migration#core","content":"@wwnds/core contains a handful of breaking changes: Some design tokens have been renamed to be more explicit in their roles. See the summary of updated token names for details. The entirety of _properties.scss has been removed, as it added complexity without adding much value.The following config options were removed: $namespace - the nds namespace is now hard-coded to improve readability.$css-property-fallback - build tools can accomplish this more simply.$warn-on-missing-fallback "},{"title":"React","type":1,"pageTitle":"Migration","url":"docs/migration#react","content":"@wwnds/react contains one breaking change to TextField. TextField can no longer be used as an uncontrolled component. If you were using it as an uncontrolled component, you'll need to switch to the new TextFieldUncontrolled.If you were using it as a controlled component, you don't need to change anything. "},{"title":"Design Tokens","type":1,"pageTitle":"Migration","url":"docs/migration#design-tokens","content":"All color role tokens have had the -color suffix added to their names. This should help clarify that the token is a color token. Note that all of the following token names are prefixed with --nds- in the corresponding CSS custom properties in @wwnds/core. New Name\tPrevious Name\tNotesbackground-color\tbody-bg text-color\tbody-text\tRelated new token: text-color-inverse subdued-color\tsubdued focus-ring\tfocus-color\tThe focus-ring token now refers to a box shadow primary-color-x\tprimary-x\tWhere x is a grade or shade* base-color-x\tbase-x\tWhere x is a grade or shade* disabled-color-x\tdisabled-x\tWhere x is a grade or shade* error-color-x\terror-x\tWhere x is a grade or shade* success-color-x\tsuccess-x\tWhere x is a grade or shade* warning-color-x\twarning-x\tWhere x is a grade or shade* focus-halo-inner-color\tfocus-ring-inner focus-halo-outer-color\tfocus-ring\tfocus-ring still exists but is now a box shadow focus-halo\tfocus-shadow focus-ring\tfocus-shadow-collapse\t * A grade is a number like 20 and a shade is an adjective like lighter. "},{"title":"v0.9.x → v1.0.0-beta.0","type":1,"pageTitle":"Migration","url":"docs/migration#v09x-→-v100-beta0","content":"The first beta release contained many breaking changes, most notably a complete rewrite of @wwnds/core. "},{"title":"Core","type":1,"pageTitle":"Migration","url":"docs/migration#core-1","content":"@wwnds/core now makes full use of Sass modules and CSS custom properties. If you were previously using @import statements to use the design system's Sass, it is highly recommended that you update to @forward and @use. Entry points# There are two main entry points: @wwnds/core (index.scss) - pure abstracts for all modules and components. Using this directly will give you the most flexibility but will require the most work.@wwnds/core/full (full.scss) - a fully-functional stylesheet with a reset and components declared. Using this directly will require little to no work but won't be as flexible as the default entry point. @use '@wwnds/core' as nds with ( $font-family-base: 'Proxima Nova', ); .my-declaration { font-family: var(--nds-font-family-base); // 'Proxima Nova' // font-family: nds.$font-family-base; // alternatively use the Sass variable // (these will compile to the same thing) } Copy View the @wwnds/core readmefor more about this. "},{"title":"React","type":1,"pageTitle":"Migration","url":"docs/migration#react-1","content":"@wwnds/react changed some elements of the TextField component. The label prop has been removed in favor of children.The following props have been renamed: help → descriptionhelpClass → descriptionClasserrorClass → errorsClass v0.9.x <TextField label=\"My text field\" help=\"A longer description of the text field.\" helpClass=\"help\" errorClass=\"error\" /> Copy v1.0.0-beta.x <TextField description=\"A longer description of the text field.\" descriptionClass=\"desc\" errorsClass=\"errors\" > My text field </TextField> Copy The resulting HTML has also changed to make better use of field composition. Most notably, the text field is now a modified field component instead of a root \"block\" (in BEM conventions). In other words, the \"block\" class name is now field instead of textfield. This was done to reuse field components across form fields. v1.0.0-beta.x <div class=\"nds-field nds-field--text nds-field--invalid\" id=\"nds-field-1\"> <div class=\"nds-field__info\"> <label class=\"nds-field__label\" for=\"nds-field-1-input\" id=\"nds-field-1-label\" > Default Text Field </label> <div class=\"nds-field__desc\" id=\"nds-field-1-desc\"> The default Text Field has a type of \"text\" </div> </div> <div class=\"nds-field__group nds-field__group--text\"> <input id=\"nds-field-1-input\" class=\"nds-field__input nds-field__input--text\" aria-describedby=\"nds-field-1-desc\" aria-invalid=\"true\" type=\"text\" value=\"\" required=\"\" aria-errormessage=\"nds-field-1-err\" /> </div> <div class=\"nds-field__feedback\"> <ul class=\"nds-field__errors\" id=\"nds-field-1-err\" aria-label=\"Errors\" aria-live=\"assertive\" aria-atomic=\"true\" > <li>This nds-field is required.</li> </ul> </div> </div> Copy "}]